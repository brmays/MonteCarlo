#BlueJ class context
comment0.target=BinaryOut
comment0.text=\r\n\ \ <i>Binary\ output</i>.\ This\ class\ provides\ methods\ for\ converting\r\n\ \ primtive\ type\ variables\ ({@code\ boolean},\ {@code\ byte},\ {@code\ char},\r\n\ \ {@code\ int},\ {@code\ long},\ {@code\ float},\ and\ {@code\ double})\r\n\ \ to\ sequences\ of\ bits\ and\ writing\ them\ to\ an\ output\ stream.\r\n\ \ The\ output\ stream\ can\ be\ standard\ output,\ a\ file,\ an\ OutputStream\ or\ a\ Socket.\r\n\ \ Uses\ big-endian\ (most-significant\ byte\ first).\r\n\ \ <p>\r\n\ \ The\ client\ must\ {@code\ flush()}\ the\ output\ stream\ when\ finished\ writing\ bits.\r\n\ \ <p>\r\n\ \ The\ client\ should\ not\ intermix\ calls\ to\ {@code\ BinaryOut}\ with\ calls\r\n\ \ to\ {@code\ Out};\ otherwise\ unexpected\ behavior\ will\ result.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=BinaryOut()
comment1.text=\r\n\ Initializes\ a\ binary\ output\ stream\ from\ standard\ output.\r\n
comment10.params=x
comment10.target=void\ write(boolean)
comment10.text=\r\n\ Writes\ the\ specified\ bit\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ boolean}\ to\ write\r\n
comment11.params=x
comment11.target=void\ write(byte)
comment11.text=\r\n\ Writes\ the\ 8-bit\ byte\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ byte}\ to\ write.\r\n
comment12.params=x
comment12.target=void\ write(int)
comment12.text=\r\n\ Writes\ the\ 32-bit\ int\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ int}\ to\ write\r\n
comment13.params=x\ r
comment13.target=void\ write(int,\ int)
comment13.text=\r\n\ Writes\ the\ r-bit\ int\ to\ the\ binary\ output\ stream.\r\n\r\n\ @param\ \ x\ the\ {@code\ int}\ to\ write\r\n\ @param\ \ r\ the\ number\ of\ relevant\ bits\ in\ the\ char\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ r}\ is\ between\ 1\ and\ 32\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x}\ is\ between\ 0\ and\ 2<sup>r</sup>\ -\ 1\r\n
comment14.params=x
comment14.target=void\ write(double)
comment14.text=\r\n\ Writes\ the\ 64-bit\ double\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ double}\ to\ write\r\n
comment15.params=x
comment15.target=void\ write(long)
comment15.text=\r\n\ Writes\ the\ 64-bit\ long\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ long}\ to\ write\r\n
comment16.params=x
comment16.target=void\ write(float)
comment16.text=\r\n\ Writes\ the\ 32-bit\ float\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ float}\ to\ write\r\n
comment17.params=x
comment17.target=void\ write(short)
comment17.text=\r\n\ Write\ the\ 16-bit\ int\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ {@code\ short}\ to\ write.\r\n
comment18.params=x
comment18.target=void\ write(char)
comment18.text=\r\n\ Writes\ the\ 8-bit\ char\ to\ the\ binary\ output\ stream.\r\n\r\n\ @param\ \ x\ the\ {@code\ char}\ to\ write\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x}\ is\ betwen\ 0\ and\ 255\r\n
comment19.params=x\ r
comment19.target=void\ write(char,\ int)
comment19.text=\r\n\ Writes\ the\ r-bit\ char\ to\ the\ binary\ output\ stream.\r\n\r\n\ @param\ \ x\ the\ {@code\ char}\ to\ write\r\n\ @param\ \ r\ the\ number\ of\ relevant\ bits\ in\ the\ char\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ r}\ is\ between\ 1\ and\ 16\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ x}\ is\ between\ 0\ and\ 2<sup>r</sup>\ -\ 1\r\n
comment2.params=os
comment2.target=BinaryOut(java.io.OutputStream)
comment2.text=\r\n\ Initializes\ a\ binary\ output\ stream\ from\ an\ {@code\ OutputStream}.\r\n\ @param\ os\ the\ {@code\ OutputStream}\r\n
comment20.params=s
comment20.target=void\ write(java.lang.String)
comment20.text=\r\n\ Writes\ the\ string\ of\ 8-bit\ characters\ to\ the\ binary\ output\ stream.\r\n\r\n\ @param\ \ s\ the\ {@code\ String}\ to\ write\r\n\ @throws\ IllegalArgumentException\ if\ any\ character\ in\ the\ string\ is\ not\r\n\ \ \ \ \ \ \ \ \ between\ 0\ and\ 255\r\n
comment21.params=s\ r
comment21.target=void\ write(java.lang.String,\ int)
comment21.text=\r\n\ Writes\ the\ string\ of\ r-bit\ characters\ to\ the\ binary\ output\ stream.\r\n\ @param\ \ s\ the\ {@code\ String}\ to\ write\r\n\ @param\ \ r\ the\ number\ of\ relevants\ bits\ in\ each\ character\r\n\ @throws\ IllegalArgumentException\ unless\ r\ is\ between\ 1\ and\ 16\r\n\ @throws\ IllegalArgumentException\ if\ any\ character\ in\ the\ string\ is\ not\r\n\ \ \ \ \ \ \ \ \ between\ 0\ and\ 2<sup>r</sup>\ -\ 1\r\n
comment22.params=args
comment22.target=void\ main(java.lang.String[])
comment22.text=\r\n\ Test\ client.\ Read\ bits\ from\ standard\ input\ and\ write\ to\ the\ file\r\n\ specified\ on\ command\ line.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=filename
comment3.target=BinaryOut(java.lang.String)
comment3.text=\r\n\ Initializes\ a\ binary\ output\ stream\ from\ a\ file.\r\n\ @param\ filename\ the\ name\ of\ the\ file\r\n
comment4.params=socket
comment4.target=BinaryOut(java.net.Socket)
comment4.text=\r\n\ Initializes\ a\ binary\ output\ stream\ from\ a\ socket.\r\n\ @param\ socket\ the\ socket\r\n
comment5.params=x
comment5.target=void\ writeBit(boolean)
comment5.text=\r\n\ Writes\ the\ specified\ bit\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ bit\r\n
comment6.params=x
comment6.target=void\ writeByte(int)
comment6.text=\r\n\ Writes\ the\ 8-bit\ byte\ to\ the\ binary\ output\ stream.\r\n\ @param\ x\ the\ byte\r\n
comment7.params=
comment7.target=void\ clearBuffer()
comment8.params=
comment8.target=void\ flush()
comment8.text=\r\n\ Flushes\ the\ binary\ output\ stream,\ padding\ 0s\ if\ number\ of\ bits\ written\ so\ far\r\n\ is\ not\ a\ multiple\ of\ 8.\r\n
comment9.params=
comment9.target=void\ close()
comment9.text=\r\n\ Flushes\ and\ closes\ the\ binary\ output\ stream.\r\n\ Once\ it\ is\ closed,\ bits\ can\ no\ longer\ be\ written.\r\n
numComments=23
