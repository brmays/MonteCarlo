#BlueJ class context
comment0.target=Particle
comment0.text=\r\n\ \ The\ {@code\ Particle}\ class\ represents\ a\ particle\ moving\ in\ the\ unit\ box,\r\n\ \ with\ a\ given\ position,\ velocity,\ radius,\ and\ mass.\ Methods\ are\ provided\r\n\ \ for\ moving\ the\ particle\ and\ for\ predicting\ and\ resolvling\ elastic\r\n\ \ collisions\ with\ vertical\ walls,\ horizontal\ walls,\ and\ other\ particles.\r\n\ \ This\ data\ type\ is\ mutable\ because\ the\ position\ and\ velocity\ change.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ \r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/61event">Section\ 6.1</a>\ of\ \r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\ \r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=rx\ ry\ vx\ vy\ radius\ mass\ color
comment1.target=Particle(double,\ double,\ double,\ double,\ double,\ double,\ java.awt.Color)
comment1.text=\r\n\ Initializes\ a\ particle\ with\ the\ specified\ position,\ velocity,\ radius,\ mass,\ and\ color.\r\n\r\n\ @param\ \ rx\ <em>x</em>-coordinate\ of\ position\r\n\ @param\ \ ry\ <em>y</em>-coordinate\ of\ position\r\n\ @param\ \ vx\ <em>x</em>-coordinate\ of\ velocity\r\n\ @param\ \ vy\ <em>y</em>-coordinate\ of\ velocity\r\n\ @param\ \ radius\ the\ radius\r\n\ @param\ \ mass\ the\ mass\r\n\ @param\ \ color\ the\ color\r\n
comment10.params=
comment10.target=void\ bounceOffVerticalWall()
comment10.text=\r\n\ Updates\ the\ velocity\ of\ this\ particle\ upon\ collision\ with\ a\ vertical\r\n\ wall\ (by\ reflecting\ the\ velocity\ in\ the\ <em>x</em>-direction).\r\n\ Assumes\ that\ the\ particle\ is\ colliding\ with\ a\ vertical\ wall\ at\ this\ instant.\r\n
comment11.params=
comment11.target=void\ bounceOffHorizontalWall()
comment11.text=\r\n\ Updates\ the\ velocity\ of\ this\ particle\ upon\ collision\ with\ a\ horizontal\r\n\ wall\ (by\ reflecting\ the\ velocity\ in\ the\ <em>y</em>-direction).\r\n\ Assumes\ that\ the\ particle\ is\ colliding\ with\ a\ horizontal\ wall\ at\ this\ instant.\r\n
comment12.params=
comment12.target=double\ kineticEnergy()
comment12.text=\r\n\ Returns\ the\ kinetic\ energy\ of\ this\ particle.\r\n\ The\ kinetic\ energy\ is\ given\ by\ the\ formula\ 1/2\ <em>m</em>\ <em>v</em><sup>2</sup>,\r\n\ where\ <em>m</em>\ is\ the\ mass\ of\ this\ particle\ and\ <em>v</em>\ is\ its\ velocity.\r\n\r\n\ @return\ the\ kinetic\ energy\ of\ this\ particle\r\n
comment2.params=
comment2.target=Particle()
comment2.text=\r\n\ Initializes\ a\ particle\ with\ a\ random\ position\ and\ velocity.\r\n\ The\ position\ is\ uniform\ in\ the\ unit\ box;\ the\ velocity\ in\r\n\ either\ direciton\ is\ chosen\ uniformly\ at\ random.\r\n
comment3.params=dt
comment3.target=void\ move(double)
comment3.text=\r\n\ Moves\ this\ particle\ in\ a\ straight\ line\ (based\ on\ its\ velocity)\r\n\ for\ the\ specified\ amount\ of\ time.\r\n\r\n\ @param\ \ dt\ the\ amount\ of\ time\r\n
comment4.params=
comment4.target=void\ draw()
comment4.text=\r\n\ Draws\ this\ particle\ to\ standard\ draw.\r\n
comment5.params=
comment5.target=int\ count()
comment5.text=\r\n\ Returns\ the\ number\ of\ collisions\ involving\ this\ particle\ with\r\n\ vertical\ walls,\ horizontal\ walls,\ or\ other\ particles.\r\n\ This\ is\ equal\ to\ the\ number\ of\ calls\ to\ {@link\ \#bounceOff},\r\n\ {@link\ \#bounceOffVerticalWall},\ and\r\n\ {@link\ \#bounceOffHorizontalWall}.\r\n\r\n\ @return\ the\ number\ of\ collisions\ involving\ this\ particle\ with\r\n\ \ \ \ \ \ \ \ \ vertical\ walls,\ horizontal\ walls,\ or\ other\ particles\r\n
comment6.params=that
comment6.target=double\ timeToHit(Particle)
comment6.text=\r\n\ Returns\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ the\ specified\r\n\ particle,\ assuming\ no\ interening\ collisions.\r\n\r\n\ @param\ \ that\ the\ other\ particle\r\n\ @return\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ the\ specified\r\n\ \ \ \ \ \ \ \ \ particle,\ assuming\ no\ interening\ collisions;\ \r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ the\ particles\ will\ not\ collide\r\n
comment7.params=
comment7.target=double\ timeToHitVerticalWall()
comment7.text=\r\n\ Returns\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ a\ vertical\r\n\ wall,\ assuming\ no\ interening\ collisions.\r\n\r\n\ @return\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ a\ vertical\ wall,\r\n\ \ \ \ \ \ \ \ \ assuming\ no\ interening\ collisions;\ \r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ the\ particle\ will\ not\ collide\r\n\ \ \ \ \ \ \ \ \ with\ a\ vertical\ wall\r\n
comment8.params=
comment8.target=double\ timeToHitHorizontalWall()
comment8.text=\r\n\ Returns\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ a\ horizontal\r\n\ wall,\ assuming\ no\ interening\ collisions.\r\n\r\n\ @return\ the\ amount\ of\ time\ for\ this\ particle\ to\ collide\ with\ a\ horizontal\ wall,\r\n\ \ \ \ \ \ \ \ \ assuming\ no\ interening\ collisions;\ \r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ the\ particle\ will\ not\ collide\r\n\ \ \ \ \ \ \ \ \ with\ a\ horizontal\ wall\r\n
comment9.params=that
comment9.target=void\ bounceOff(Particle)
comment9.text=\r\n\ Updates\ the\ velocities\ of\ this\ particle\ and\ the\ specified\ particle\ according\r\n\ to\ the\ laws\ of\ elastic\ collision.\ Assumes\ that\ the\ particles\ are\ colliding\r\n\ at\ this\ instant.\r\n\r\n\ @param\ \ that\ the\ other\ particle\r\n
numComments=13
