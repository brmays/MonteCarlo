#BlueJ class context
comment0.target=DigraphGenerator
comment0.text=\r\n\ \ The\ {@code\ DigraphGenerator}\ class\ provides\ static\ methods\ for\ creating\r\n\ \ various\ digraphs,\ including\ Erdos-Renyi\ random\ digraphs,\ random\ DAGs,\r\n\ \ random\ rooted\ trees,\ random\ rooted\ DAGs,\ random\ tournaments,\ path\ digraphs,\r\n\ \ cycle\ digraphs,\ and\ the\ complete\ digraph.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/42digraph">Section\ 4.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=DigraphGenerator()
comment10.params=V
comment10.target=Digraph\ rootedOutTree(int)
comment10.text=\r\n\ Returns\ a\ random\ rooted-out\ tree\ on\ {@code\ V}\ vertices.\ A\ rooted\ out-tree\r\n\ is\ an\ oriented\ tree\ in\ which\ each\ vertex\ is\ reachable\ from\ a\ single\ vertex.\r\n\ It\ is\ also\ known\ as\ a\ <em>arborescence</em>\ or\ <em>branching</em>.\r\n\ The\ tree\ returned\ is\ not\ chosen\ uniformly\ at\ random\ among\ all\ such\ trees.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @return\ a\ random\ rooted-out\ tree\ on\ {@code\ V}\ vertices\r\n
comment11.params=V
comment11.target=Digraph\ path(int)
comment11.text=\r\n\ Returns\ a\ path\ digraph\ on\ {@code\ V}\ vertices.\r\n\ @param\ V\ the\ number\ of\ vertices\ in\ the\ path\r\n\ @return\ a\ digraph\ that\ is\ a\ directed\ path\ on\ {@code\ V}\ vertices\r\n
comment12.params=V
comment12.target=Digraph\ binaryTree(int)
comment12.text=\r\n\ Returns\ a\ complete\ binary\ tree\ digraph\ on\ {@code\ V}\ vertices.\r\n\ @param\ V\ the\ number\ of\ vertices\ in\ the\ binary\ tree\r\n\ @return\ a\ digraph\ that\ is\ a\ complete\ binary\ tree\ on\ {@code\ V}\ vertices\r\n
comment13.params=V
comment13.target=Digraph\ cycle(int)
comment13.text=\r\n\ Returns\ a\ cycle\ digraph\ on\ {@code\ V}\ vertices.\r\n\ @param\ V\ the\ number\ of\ vertices\ in\ the\ cycle\r\n\ @return\ a\ digraph\ that\ is\ a\ directed\ cycle\ on\ {@code\ V}\ vertices\r\n
comment14.params=V\ E
comment14.target=Digraph\ eulerianCycle(int,\ int)
comment14.text=\r\n\ Returns\ an\ Eulerian\ cycle\ digraph\ on\ {@code\ V}\ vertices.\r\n\r\n\ @param\ \ V\ the\ number\ of\ vertices\ in\ the\ cycle\r\n\ @param\ \ E\ the\ number\ of\ edges\ in\ the\ cycle\r\n\ @return\ a\ digraph\ that\ is\ a\ directed\ Eulerian\ cycle\ on\ {@code\ V}\ vertices\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ E}\ edges\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ V\ <\=\ 0}\ or\ {@code\ E\ <\=\ 0}\r\n
comment15.params=V\ E
comment15.target=Digraph\ eulerianPath(int,\ int)
comment15.text=\r\n\ Returns\ an\ Eulerian\ path\ digraph\ on\ {@code\ V}\ vertices.\r\n\r\n\ @param\ \ V\ the\ number\ of\ vertices\ in\ the\ path\r\n\ @param\ \ E\ the\ number\ of\ edges\ in\ the\ path\r\n\ @return\ a\ digraph\ that\ is\ a\ directed\ Eulerian\ path\ on\ {@code\ V}\ vertices\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ E}\ edges\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ V\ <\=\ 0}\ or\ {@code\ E\ <\ 0}\r\n
comment16.params=V\ E\ c
comment16.target=Digraph\ strong(int,\ int,\ int)
comment16.text=\r\n\ Returns\ a\ random\ simple\ digraph\ on\ {@code\ V}\ vertices,\ {@code\ E}\r\n\ edges\ and\ (at\ least)\ {@code\ c}\ strong\ components.\ The\ vertices\ are\ randomly\r\n\ assigned\ integer\ labels\ between\ {@code\ 0}\ and\ {@code\ c-1}\ (corresponding\ to\ \r\n\ strong\ components).\ Then,\ a\ strong\ component\ is\ creates\ among\ the\ vertices\r\n\ with\ the\ same\ label.\ Next,\ random\ edges\ (either\ between\ two\ vertices\ with\r\n\ the\ same\ labels\ or\ from\ a\ vetex\ with\ a\ smaller\ label\ to\ a\ vertex\ with\ a\ \r\n\ larger\ label).\ The\ number\ of\ components\ will\ be\ equal\ to\ the\ number\ of\r\n\ distinct\ labels\ that\ are\ assigned\ to\ vertices.\r\n\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ E\ the\ number\ of\ edges\r\n\ @param\ c\ the\ (maximum)\ number\ of\ strong\ components\r\n\ @return\ a\ random\ simple\ digraph\ on\ {@code\ V}\ vertices\ and\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {@code\ E}\ edges,\ with\ (at\ most)\ {@code\ c}\ strong\ components\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ c}\ is\ larger\ than\ {@code\ V}\r\n
comment17.params=args
comment17.target=void\ main(java.lang.String[])
comment17.text=\r\n\ Unit\ tests\ the\ {@code\ DigraphGenerator}\ library.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=V\ E
comment2.target=Digraph\ simple(int,\ int)
comment2.text=\r\n\ Returns\ a\ random\ simple\ digraph\ containing\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ E\ the\ number\ of\ vertices\r\n\ @return\ a\ random\ simple\ digraph\ on\ {@code\ V}\ vertices,\ containing\ a\ total\r\n\ \ \ \ \ of\ {@code\ E}\ edges\r\n\ @throws\ IllegalArgumentException\ if\ no\ such\ simple\ digraph\ exists\r\n
comment3.params=V\ p
comment3.target=Digraph\ simple(int,\ double)
comment3.text=\r\n\ Returns\ a\ random\ simple\ digraph\ on\ {@code\ V}\ vertices,\ with\ an\ \r\n\ edge\ between\ any\ two\ vertices\ with\ probability\ {@code\ p}.\ This\ is\ sometimes\r\n\ referred\ to\ as\ the\ Erdos-Renyi\ random\ digraph\ model.\r\n\ This\ implementations\ takes\ time\ propotional\ to\ V^2\ (even\ if\ {@code\ p}\ is\ small).\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ p\ the\ probability\ of\ choosing\ an\ edge\r\n\ @return\ a\ random\ simple\ digraph\ on\ {@code\ V}\ vertices,\ with\ an\ edge\ between\r\n\ \ \ \ \ any\ two\ vertices\ with\ probability\ {@code\ p}\r\n\ @throws\ IllegalArgumentException\ if\ probability\ is\ not\ between\ 0\ and\ 1\r\n
comment4.params=V
comment4.target=Digraph\ complete(int)
comment4.text=\r\n\ Returns\ the\ complete\ digraph\ on\ {@code\ V}\ vertices.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @return\ the\ complete\ digraph\ on\ {@code\ V}\ vertices\r\n
comment5.params=V\ E
comment5.target=Digraph\ dag(int,\ int)
comment5.text=\r\n\ Returns\ a\ random\ simple\ DAG\ containing\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges.\r\n\ Note\:\ it\ is\ not\ uniformly\ selected\ at\ random\ among\ all\ such\ DAGs.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ E\ the\ number\ of\ vertices\r\n\ @return\ a\ random\ simple\ DAG\ on\ {@code\ V}\ vertices,\ containing\ a\ total\r\n\ \ \ \ \ of\ {@code\ E}\ edges\r\n\ @throws\ IllegalArgumentException\ if\ no\ such\ simple\ DAG\ exists\r\n
comment6.params=V
comment6.target=Digraph\ tournament(int)
comment6.text=\r\n\ Returns\ a\ random\ tournament\ digraph\ on\ {@code\ V}\ vertices.\ A\ tournament\ digraph\r\n\ is\ a\ DAG\ in\ which\ for\ every\ two\ vertices,\ there\ is\ one\ directed\ edge.\r\n\ A\ tournament\ is\ an\ oriented\ complete\ graph.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @return\ a\ random\ tournament\ digraph\ on\ {@code\ V}\ vertices\r\n
comment7.params=V\ E
comment7.target=Digraph\ rootedInDAG(int,\ int)
comment7.text=\r\n\ Returns\ a\ random\ rooted-in\ DAG\ on\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges.\r\n\ A\ rooted\ in-tree\ is\ a\ DAG\ in\ which\ there\ is\ a\ single\ vertex\r\n\ reachable\ from\ every\ other\ vertex.\r\n\ The\ DAG\ returned\ is\ not\ chosen\ uniformly\ at\ random\ among\ all\ such\ DAGs.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ E\ the\ number\ of\ edges\r\n\ @return\ a\ random\ rooted-in\ DAG\ on\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges\r\n
comment8.params=V\ E
comment8.target=Digraph\ rootedOutDAG(int,\ int)
comment8.text=\r\n\ Returns\ a\ random\ rooted-out\ DAG\ on\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges.\r\n\ A\ rooted\ out-tree\ is\ a\ DAG\ in\ which\ every\ vertex\ is\ reachable\ from\ a\r\n\ single\ vertex.\r\n\ The\ DAG\ returned\ is\ not\ chosen\ uniformly\ at\ random\ among\ all\ such\ DAGs.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @param\ E\ the\ number\ of\ edges\r\n\ @return\ a\ random\ rooted-out\ DAG\ on\ {@code\ V}\ vertices\ and\ {@code\ E}\ edges\r\n
comment9.params=V
comment9.target=Digraph\ rootedInTree(int)
comment9.text=\r\n\ Returns\ a\ random\ rooted-in\ tree\ on\ {@code\ V}\ vertices.\r\n\ A\ rooted\ in-tree\ is\ an\ oriented\ tree\ in\ which\ there\ is\ a\ single\ vertex\r\n\ reachable\ from\ every\ other\ vertex.\r\n\ The\ tree\ returned\ is\ not\ chosen\ uniformly\ at\ random\ among\ all\ such\ trees.\r\n\ @param\ V\ the\ number\ of\ vertices\r\n\ @return\ a\ random\ rooted-in\ tree\ on\ {@code\ V}\ vertices\r\n
numComments=18
