#BlueJ class context
comment0.target=LinearProgramming
comment0.text=\r\n\ \ The\ {@code\ LinearProgramming}\ class\ represents\ a\ data\ type\ for\ solving\ a\r\n\ \ linear\ program\ of\ the\ form\ {\ max\ cx\ \:\ Ax\ &le;\ b,\ x\ &ge;\ 0\ },\ where\ A\ is\ a\ m-by-n\r\n\ \ matrix,\ b\ is\ an\ m-length\ vector,\ and\ c\ is\ an\ n-length\ vector.\ For\ simplicity,\r\n\ \ we\ assume\ that\ A\ is\ of\ full\ rank\ and\ that\ b\ &ge;\ 0\ so\ that\ x\ \=\ 0\ is\ a\ basic\r\n\ \ feasible\ soution.\r\n\ \ <p>\r\n\ \ The\ data\ type\ supplies\ methods\ for\ determining\ the\ optimal\ primal\ and\r\n\ \ dual\ solutions.\r\n\ \ <p>\r\n\ \ This\ is\ a\ bare-bones\ implementation\ of\ the\ <em>simplex\ algorithm</em>.\r\n\ \ It\ uses\ Bland's\ rule\ to\ determing\ the\ entering\ and\ leaving\ variables.\r\n\ \ It\ is\ not\ suitable\ for\ use\ on\ large\ inputs.\ It\ is\ also\ not\ robust\r\n\ \ in\ the\ presence\ of\ floating-point\ roundoff\ error.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://algs4.cs.princeton.edu/65reductions">Section\ 6.5</a>\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=A\ b\ c
comment1.target=LinearProgramming(double[][],\ double[],\ double[])
comment1.text=\r\n\ Determines\ an\ optimal\ solution\ to\ the\ linear\ program\r\n\ {\ max\ cx\ \:\ Ax\ &le;\ b,\ x\ &ge;\ 0\ },\ where\ A\ is\ a\ m-by-n\r\n\ matrix,\ b\ is\ an\ m-length\ vector,\ and\ c\ is\ an\ n-length\ vector.\r\n\r\n\ @param\ \ A\ the\ <em>m</em>-by-<em>b</em>\ matrix\r\n\ @param\ \ b\ the\ <em>m</em>-length\ RHS\ vector\r\n\ @param\ \ c\ the\ <em>n</em>-length\ cost\ vector\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ b[i]\ >\=\ 0}\ for\ each\ {@code\ i}\r\n\ @throws\ ArithmeticException\ if\ the\ linear\ program\ is\ unbounded\r\n
comment10.params=A\ b
comment10.target=boolean\ isPrimalFeasible(double[][],\ double[])
comment11.params=A\ c
comment11.target=boolean\ isDualFeasible(double[][],\ double[])
comment12.params=b\ c
comment12.target=boolean\ isOptimal(double[],\ double[])
comment13.params=A\ b\ c
comment13.target=boolean\ check(double[][],\ double[],\ double[])
comment14.params=
comment14.target=void\ show()
comment15.params=A\ b\ c
comment15.target=void\ test(double[][],\ double[],\ double[])
comment16.params=
comment16.target=void\ test1()
comment17.params=
comment17.target=void\ test2()
comment18.params=
comment18.target=void\ test3()
comment19.params=
comment19.target=void\ test4()
comment2.params=
comment2.target=void\ solve()
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment20.text=\r\n\ Unit\ tests\ the\ {@code\ LinearProgramming}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=
comment3.target=int\ bland()
comment4.params=
comment4.target=int\ dantzig()
comment5.params=q
comment5.target=int\ minRatioRule(int)
comment6.params=p\ q
comment6.target=void\ pivot(int,\ int)
comment7.params=
comment7.target=double\ value()
comment7.text=\r\n\ Returns\ the\ optimal\ value\ of\ this\ linear\ program.\r\n\r\n\ @return\ the\ optimal\ value\ of\ this\ linear\ program\r\n\r\n
comment8.params=
comment8.target=double[]\ primal()
comment8.text=\r\n\ Returns\ the\ optimal\ primal\ solution\ to\ this\ linear\ program.\r\n\r\n\ @return\ the\ optimal\ primal\ solution\ to\ this\ linear\ program\r\n
comment9.params=
comment9.target=double[]\ dual()
comment9.text=\r\n\ Returns\ the\ optimal\ dual\ solution\ to\ this\ linear\ program\r\n\r\n\ @return\ the\ optimal\ dual\ solution\ to\ this\ linear\ program\r\n
numComments=21
