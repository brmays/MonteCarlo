#BlueJ class context
comment0.target=SymbolGraph
comment0.text=\r\n\ \ The\ {@code\ SymbolGraph}\ class\ represents\ an\ undirected\ graph,\ where\ the\r\n\ \ vertex\ names\ are\ arbitrary\ strings.\r\n\ \ By\ providing\ mappings\ between\ string\ vertex\ names\ and\ integers,\r\n\ \ it\ serves\ as\ a\ wrapper\ around\ the\r\n\ \ {@link\ Graph}\ data\ type,\ which\ assumes\ the\ vertex\ names\ are\ integers\r\n\ \ between\ 0\ and\ <em>V</em>\ -\ 1.\r\n\ \ It\ also\ supports\ initializing\ a\ symbol\ graph\ from\ a\ file.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ an\ {@link\ ST}\ to\ map\ from\ strings\ to\ integers,\r\n\ \ an\ array\ to\ map\ from\ integers\ to\ strings,\ and\ a\ {@link\ Graph}\ to\ store\r\n\ \ the\ underlying\ graph.\r\n\ \ The\ <em>indexOf</em>\ and\ <em>contains</em>\ operations\ take\ time\ \r\n\ \ proportional\ to\ log\ <em>V</em>,\ where\ <em>V</em>\ is\ the\ number\ of\ vertices.\r\n\ \ The\ <em>nameOf</em>\ operation\ takes\ constant\ time.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/41graph">Section\ 4.1</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=filename\ delimiter
comment1.target=SymbolGraph(java.lang.String,\ java.lang.String)
comment1.text=\ \ \r\n\ Initializes\ a\ graph\ from\ a\ file\ using\ the\ specified\ delimiter.\r\n\ Each\ line\ in\ the\ file\ contains\r\n\ the\ name\ of\ a\ vertex,\ followed\ by\ a\ list\ of\ the\ names\r\n\ of\ the\ vertices\ adjacent\ to\ that\ vertex,\ separated\ by\ the\ delimiter.\r\n\ @param\ filename\ the\ name\ of\ the\ file\r\n\ @param\ delimiter\ the\ delimiter\ between\ fields\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment10.text=\r\n\ Unit\ tests\ the\ {@code\ SymbolGraph}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=s
comment2.target=boolean\ contains(java.lang.String)
comment2.text=\r\n\ Does\ the\ graph\ contain\ the\ vertex\ named\ {@code\ s}?\r\n\ @param\ s\ the\ name\ of\ a\ vertex\r\n\ @return\ {@code\ true}\ if\ {@code\ s}\ is\ the\ name\ of\ a\ vertex,\ and\ {@code\ false}\ otherwise\r\n
comment3.params=s
comment3.target=int\ index(java.lang.String)
comment3.text=\r\n\ Returns\ the\ integer\ associated\ with\ the\ vertex\ named\ {@code\ s}.\r\n\ @param\ s\ the\ name\ of\ a\ vertex\r\n\ @return\ the\ integer\ (between\ 0\ and\ <em>V</em>\ -\ 1)\ associated\ with\ the\ vertex\ named\ {@code\ s}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#indexOf(String)}.\r\n
comment4.params=s
comment4.target=int\ indexOf(java.lang.String)
comment4.text=\r\n\ Returns\ the\ integer\ associated\ with\ the\ vertex\ named\ {@code\ s}.\r\n\ @param\ s\ the\ name\ of\ a\ vertex\r\n\ @return\ the\ integer\ (between\ 0\ and\ <em>V</em>\ -\ 1)\ associated\ with\ the\ vertex\ named\ {@code\ s}\r\n
comment5.params=v
comment5.target=java.lang.String\ name(int)
comment5.text=\r\n\ Returns\ the\ name\ of\ the\ vertex\ associated\ with\ the\ integer\ {@code\ v}.\r\n\ @param\ \ v\ the\ integer\ corresponding\ to\ a\ vertex\ (between\ 0\ and\ <em>V</em>\ -\ 1)\ \r\n\ @return\ the\ name\ of\ the\ vertex\ associated\ with\ the\ integer\ {@code\ v}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#nameOf(int)}.\r\n
comment6.params=v
comment6.target=java.lang.String\ nameOf(int)
comment6.text=\r\n\ Returns\ the\ name\ of\ the\ vertex\ associated\ with\ the\ integer\ {@code\ v}.\r\n\ @param\ \ v\ the\ integer\ corresponding\ to\ a\ vertex\ (between\ 0\ and\ <em>V</em>\ -\ 1)\ \r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n\ @return\ the\ name\ of\ the\ vertex\ associated\ with\ the\ integer\ {@code\ v}\r\n
comment7.params=
comment7.target=Graph\ G()
comment7.text=\r\n\ Returns\ the\ graph\ assoicated\ with\ the\ symbol\ graph.\ It\ is\ the\ client's\ responsibility\r\n\ not\ to\ mutate\ the\ graph.\r\n\ @return\ the\ graph\ associated\ with\ the\ symbol\ graph\r\n\ @deprecated\ Replaced\ by\ {@link\ \#graph()}.\r\n
comment8.params=
comment8.target=Graph\ graph()
comment8.text=\r\n\ Returns\ the\ graph\ assoicated\ with\ the\ symbol\ graph.\ It\ is\ the\ client's\ responsibility\r\n\ not\ to\ mutate\ the\ graph.\r\n\ @return\ the\ graph\ associated\ with\ the\ symbol\ graph\r\n
comment9.params=v
comment9.target=void\ validateVertex(int)
numComments=11
