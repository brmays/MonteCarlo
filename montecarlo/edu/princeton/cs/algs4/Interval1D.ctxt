#BlueJ class context
comment0.target=Interval1D
comment0.text=\r\n\ \ The\ {@code\ Interval1D}\ class\ represents\ a\ one-dimensional\ interval.\r\n\ \ The\ interval\ is\ <em>closed</em>\u00E2\u20AC\u201Dit\ contains\ both\ endpoints.\r\n\ \ Intervals\ are\ immutable\:\ their\ values\ cannot\ be\ changed\ after\ they\ are\ created.\r\n\ \ The\ class\ {@code\ Interval1D}\ includes\ methods\ for\ checking\ whether\r\n\ \ an\ interval\ contains\ a\ point\ and\ determining\ whether\ two\ intervals\ intersect.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ \r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/12oop">Section\ 1.2</a>\ of\ \r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\ \r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=min\ max
comment1.target=Interval1D(double,\ double)
comment1.text=\r\n\ Initializes\ a\ closed\ interval\ [min,\ max].\r\n\r\n\ @param\ \ min\ the\ smaller\ endpoint\r\n\ @param\ \ max\ the\ larger\ endpoint\r\n\ @throws\ IllegalArgumentException\ if\ the\ min\ endpoint\ is\ greater\ than\ the\ max\ endpoint\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ min}\ or\ {@code\ max}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ Double.NaN},\ {@code\ Double.POSITIVE_INFINITY}\ or\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.NEGATIVE_INFINITY}\r\n\r\n
comment10.params=other
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\r\n\ Compares\ this\ transaction\ to\ the\ specified\ object.\r\n\r\n\ @param\ \ other\ the\ other\ interval\r\n\ @return\ {@code\ true}\ if\ this\ interval\ equals\ the\ other\ interval;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment11.params=
comment11.target=int\ hashCode()
comment11.text=\r\n\ Returns\ an\ integer\ hash\ code\ for\ this\ interval.\r\n\r\n\ @return\ an\ integer\ hash\ code\ for\ this\ interval\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ Unit\ tests\ the\ {@code\ Interval1D}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=
comment2.target=double\ left()
comment2.text=\r\n\ Returns\ the\ left\ endpoint\ of\ this\ interval.\r\n\r\n\ @return\ the\ left\ endpoint\ of\ this\ interval\r\n\ @deprecated\ Replaced\ by\ {@link\ \#min()}.\r\n
comment3.params=
comment3.target=double\ right()
comment3.text=\r\n\ Returns\ the\ right\ endpoint\ of\ this\ interval.\r\n\ @return\ the\ right\ endpoint\ of\ this\ interval\r\n\ @deprecated\ Replaced\ by\ {@link\ \#max()}.\r\n
comment4.params=
comment4.target=double\ min()
comment4.text=\r\n\ Returns\ the\ min\ endpoint\ of\ this\ interval.\r\n\r\n\ @return\ the\ min\ endpoint\ of\ this\ interval\r\n
comment5.params=
comment5.target=double\ max()
comment5.text=\r\n\ Returns\ the\ max\ endpoint\ of\ this\ interval.\r\n\r\n\ @return\ the\ max\ endpoint\ of\ this\ interval\r\n
comment6.params=that
comment6.target=boolean\ intersects(Interval1D)
comment6.text=\r\n\ Returns\ true\ if\ this\ interval\ intersects\ the\ specified\ interval.\r\n\r\n\ @param\ \ that\ the\ other\ interval\r\n\ @return\ {@code\ true}\ if\ this\ interval\ intersects\ the\ argument\ interval;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment7.params=x
comment7.target=boolean\ contains(double)
comment7.text=\r\n\ Returns\ true\ if\ this\ interval\ contains\ the\ specified\ value.\r\n\r\n\ @param\ x\ the\ value\r\n\ @return\ {@code\ true}\ if\ this\ interval\ contains\ the\ value\ {@code\ x};\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment8.params=
comment8.target=double\ length()
comment8.text=\r\n\ Returns\ the\ length\ of\ this\ interval.\r\n\r\n\ @return\ the\ length\ of\ this\ interval\ (max\ -\ min)\r\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ interval.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ interval\ in\ the\ form\ [min,\ max]\r\n
numComments=13
