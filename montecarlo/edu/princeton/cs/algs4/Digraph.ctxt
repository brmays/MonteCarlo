#BlueJ class context
comment0.target=Digraph
comment0.text=\r\n\ \ The\ {@code\ Digraph}\ class\ represents\ a\ directed\ graph\ of\ vertices\r\n\ \ named\ 0\ through\ <em>V</em>\ -\ 1.\r\n\ \ It\ supports\ the\ following\ two\ primary\ operations\:\ add\ an\ edge\ to\ the\ digraph,\r\n\ \ iterate\ over\ all\ of\ the\ vertices\ adjacent\ from\ a\ given\ vertex.\r\n\ \ Parallel\ edges\ and\ self-loops\ are\ permitted.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ an\ adjacency-lists\ representation,\ which\ \r\n\ \ is\ a\ vertex-indexed\ array\ of\ {@link\ Bag}\ objects.\r\n\ \ All\ operations\ take\ constant\ time\ (in\ the\ worst\ case)\ except\r\n\ \ iterating\ over\ the\ vertices\ adjacent\ from\ a\ given\ vertex,\ which\ takes\r\n\ \ time\ proportional\ to\ the\ number\ of\ such\ vertices.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/42digraph">Section\ 4.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=V
comment1.target=Digraph(int)
comment1.text=\r\n\ Initializes\ an\ empty\ digraph\ with\ <em>V</em>\ vertices.\r\n\r\n\ @param\ \ V\ the\ number\ of\ vertices\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ V\ <\ 0}\r\n
comment10.params=v
comment10.target=int\ indegree(int)
comment10.text=\r\n\ Returns\ the\ number\ of\ directed\ edges\ incident\ to\ vertex\ {@code\ v}.\r\n\ This\ is\ known\ as\ the\ <em>indegree</em>\ of\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ indegree\ of\ vertex\ {@code\ v}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment11.params=
comment11.target=Digraph\ reverse()
comment11.text=\r\n\ Returns\ the\ reverse\ of\ the\ digraph.\r\n\r\n\ @return\ the\ reverse\ of\ the\ digraph\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ graph.\r\n\r\n\ @return\ the\ number\ of\ vertices\ <em>V</em>,\ followed\ by\ the\ number\ of\ edges\ <em>E</em>,\ \ \r\n\ \ \ \ \ \ \ \ \ followed\ by\ the\ <em>V</em>\ adjacency\ lists\r\n
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment13.text=\r\n\ Unit\ tests\ the\ {@code\ Digraph}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=in
comment2.target=Digraph(In)
comment2.text=\ \ \r\n\ Initializes\ a\ digraph\ from\ the\ specified\ input\ stream.\r\n\ The\ format\ is\ the\ number\ of\ vertices\ <em>V</em>,\r\n\ followed\ by\ the\ number\ of\ edges\ <em>E</em>,\r\n\ followed\ by\ <em>E</em>\ pairs\ of\ vertices,\ with\ each\ entry\ separated\ by\ whitespace.\r\n\r\n\ @param\ \ in\ the\ input\ stream\r\n\ @throws\ IllegalArgumentException\ if\ the\ endpoints\ of\ any\ edge\ are\ not\ in\ prescribed\ range\r\n\ @throws\ IllegalArgumentException\ if\ the\ number\ of\ vertices\ or\ edges\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ input\ stream\ is\ in\ the\ wrong\ format\r\n
comment3.params=G
comment3.target=Digraph(Digraph)
comment3.text=\r\n\ Initializes\ a\ new\ digraph\ that\ is\ a\ deep\ copy\ of\ the\ specified\ digraph.\r\n\r\n\ @param\ \ G\ the\ digraph\ to\ copy\r\n
comment4.params=
comment4.target=int\ V()
comment4.text=\r\n\ Returns\ the\ number\ of\ vertices\ in\ this\ digraph.\r\n\r\n\ @return\ the\ number\ of\ vertices\ in\ this\ digraph\r\n
comment5.params=
comment5.target=int\ E()
comment5.text=\r\n\ Returns\ the\ number\ of\ edges\ in\ this\ digraph.\r\n\r\n\ @return\ the\ number\ of\ edges\ in\ this\ digraph\r\n
comment6.params=v
comment6.target=void\ validateVertex(int)
comment7.params=v\ w
comment7.target=void\ addEdge(int,\ int)
comment7.text=\r\n\ Adds\ the\ directed\ edge\ v\u00E2\u2020\u2019w\ to\ this\ digraph.\r\n\r\n\ @param\ \ v\ the\ tail\ vertex\r\n\ @param\ \ w\ the\ head\ vertex\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ v\ <\ V}\ and\ {@code\ 0\ <\=\ w\ <\ V}\r\n
comment8.params=v
comment8.target=java.lang.Iterable\ adj(int)
comment8.text=\r\n\ Returns\ the\ vertices\ adjacent\ from\ vertex\ {@code\ v}\ in\ this\ digraph.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ vertices\ adjacent\ from\ vertex\ {@code\ v}\ in\ this\ digraph,\ as\ an\ iterable\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment9.params=v
comment9.target=int\ outdegree(int)
comment9.text=\r\n\ Returns\ the\ number\ of\ directed\ edges\ incident\ from\ vertex\ {@code\ v}.\r\n\ This\ is\ known\ as\ the\ <em>outdegree</em>\ of\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ outdegree\ of\ vertex\ {@code\ v}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
numComments=14
