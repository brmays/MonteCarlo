#BlueJ class context
comment0.target=DepthFirstOrder
comment0.text=\r\n\ \ The\ {@code\ DepthFirstOrder}\ class\ represents\ a\ data\ type\ for\ \r\n\ \ determining\ depth-first\ search\ ordering\ of\ the\ vertices\ in\ a\ digraph\r\n\ \ or\ edge-weighted\ digraph,\ including\ preorder,\ postorder,\ and\ reverse\ postorder.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ depth-first\ search.\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>V</em>\ +\ <em>E</em>\r\n\ \ (in\ the\ worst\ case),\r\n\ \ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\ <em>E</em>\ is\ the\ number\ of\ edges.\r\n\ \ Afterwards,\ the\ <em>preorder</em>,\ <em>postorder</em>,\ and\ <em>reverse\ postorder</em>\r\n\ \ operation\ takes\ take\ time\ proportional\ to\ <em>V</em>.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/42digraph">Section\ 4.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G
comment1.target=DepthFirstOrder(Digraph)
comment1.text=\r\n\ Determines\ a\ depth-first\ order\ for\ the\ digraph\ {@code\ G}.\r\n\ @param\ G\ the\ digraph\r\n
comment10.params=
comment10.target=boolean\ check()
comment11.params=v
comment11.target=void\ validateVertex(int)
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ Unit\ tests\ the\ {@code\ DepthFirstOrder}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=G
comment2.target=DepthFirstOrder(EdgeWeightedDigraph)
comment2.text=\r\n\ Determines\ a\ depth-first\ order\ for\ the\ edge-weighted\ digraph\ {@code\ G}.\r\n\ @param\ G\ the\ edge-weighted\ digraph\r\n
comment3.params=G\ v
comment3.target=void\ dfs(Digraph,\ int)
comment4.params=G\ v
comment4.target=void\ dfs(EdgeWeightedDigraph,\ int)
comment5.params=v
comment5.target=int\ pre(int)
comment5.text=\r\n\ Returns\ the\ preorder\ number\ of\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ preorder\ number\ of\ vertex\ {@code\ v}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment6.params=v
comment6.target=int\ post(int)
comment6.text=\r\n\ Returns\ the\ postorder\ number\ of\ vertex\ {@code\ v}.\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ postorder\ number\ of\ vertex\ {@code\ v}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment7.params=
comment7.target=java.lang.Iterable\ post()
comment7.text=\r\n\ Returns\ the\ vertices\ in\ postorder.\r\n\ @return\ the\ vertices\ in\ postorder,\ as\ an\ iterable\ of\ vertices\r\n
comment8.params=
comment8.target=java.lang.Iterable\ pre()
comment8.text=\r\n\ Returns\ the\ vertices\ in\ preorder.\r\n\ @return\ the\ vertices\ in\ preorder,\ as\ an\ iterable\ of\ vertices\r\n
comment9.params=
comment9.target=java.lang.Iterable\ reversePost()
comment9.text=\r\n\ Returns\ the\ vertices\ in\ reverse\ postorder.\r\n\ @return\ the\ vertices\ in\ reverse\ postorder,\ as\ an\ iterable\ of\ vertices\r\n
numComments=13
