#BlueJ class context
comment0.target=Picture
comment0.text=\r\n\ \ This\ class\ provides\ methods\ for\ manipulating\ individual\ pixels\ of\r\n\ \ an\ image\ using\ the\ RGB\ color\ format.\ The\ alpha\ component\ (for\ transparency)\r\n\ \ is\ not\ currently\ supported.\r\n\ \ The\ original\ image\ can\ be\ read\ from\ a\ {@code\ PNG},\ {@code\ GIF},\r\n\ \ or\ {@code\ JPEG}\ file\ or\ the\ user\ can\ create\ a\ blank\ image\ of\ a\ given\ dimension.\r\n\ \ This\ class\ includes\ methods\ for\ displaying\ the\ image\ in\ a\ window\ on\r\n\ \ the\ screen\ or\ saving\ it\ to\ a\ file.\r\n\ \ <p>\r\n\ \ Pixel\ (<em>col</em>,\ <em>row</em>)\ is\ column\ <em>col</em>\ and\ row\ <em>row</em>.\r\n\ \ By\ default,\ the\ origin\ (0,\ 0)\ is\ the\ pixel\ in\ the\ top-left\ corner,\r\n\ \ which\ is\ a\ common\ convention\ in\ image\ processing.\r\n\ \ The\ method\ {@link\ \#setOriginLowerLeft()}\ change\ the\ origin\ to\ the\ lower\ left.\r\n\ \ <p>\r\n\ \ The\ {@code\ get()}\ and\ {@code\ set()}\ methods\ use\ {@link\ Color}\ objects\ to\ get\r\n\ \ or\ set\ the\ color\ of\ the\ specified\ pixel.\r\n\ \ The\ {@code\ getRGB()}\ and\ {@code\ setRGB()}\ methods\ use\ a\ 32-bit\ {@code\ int}\r\n\ \ to\ encode\ the\ color,\ thereby\ avoiding\ the\ need\ to\ create\ temporary\r\n\ \ {@code\ Color}\ objects.\ The\ red\ (R),\ green\ (G),\ and\ blue\ (B)\ components\ \r\n\ \ are\ encoded\ using\ the\ least\ significant\ 24\ bits.\r\n\ \ Given\ a\ 32-bit\ {@code\ int}\ encoding\ the\ color,\ the\ following\ code\ extracts\r\n\ \ the\ RGB\ components\:\r\n\ <blockquote><pre>\r\n\ \ int\ r\ \=\ (rgb\ >>\ 16)\ &\ 0xFF;\r\n\ \ int\ g\ \=\ (rgb\ >>\ \ 8)\ &\ 0xFF;\r\n\ \ int\ b\ \=\ (rgb\ >>\ \ 0)\ &\ 0xFF;\r\n\ \ </pre></blockquote>\ \r\n\ \ Given\ the\ RGB\ components\ (8-bits\ each)\ of\ a\ color,\r\n\ \ the\ following\ statement\ packs\ it\ into\ a\ 32-bit\ {@code\ int}\:\r\n\ <blockquote><pre>\r\n\ \ int\ rgb\ \=\ (r\ <<\ 16)\ +\ (g\ <<\ 8)\ +\ (b\ <<\ 0);\r\n\ </pre></blockquote>\ \r\n\ \ <p>\r\n\ \ A\ <em>W</em>-by-<en>H</em>\ picture\ uses\ ~\ 4\ <em>W\ H</em>\ bytes\ of\ memory,\r\n\ \ since\ the\ color\ of\ each\ pixel\ is\ encoded\ as\ a\ 32-bit\ <code>int</code>.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://introcs.cs.princeton.edu/31datatype">Section\ 3.1</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ See\ {@link\ GrayscalePicture}\ for\ a\ version\ that\ supports\ grayscale\ images.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=width\ height
comment1.target=Picture(int,\ int)
comment1.text=\r\n\ Creates\ a\ {@code\ width}-by-{@code\ height}\ picture,\ with\ {@code\ width}\ columns\r\n\ and\ {@code\ height}\ rows,\ where\ each\ pixel\ is\ black.\r\n\r\n\ @param\ width\ the\ width\ of\ the\ picture\r\n\ @param\ height\ the\ height\ of\ the\ picture\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ width}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ height}\ is\ negative\r\n
comment10.params=
comment10.target=int\ width()
comment10.text=\r\n\ Returns\ the\ width\ of\ the\ picture.\r\n\r\n\ @return\ the\ width\ of\ the\ picture\ (in\ pixels)\r\n
comment11.params=row
comment11.target=void\ validateRowIndex(int)
comment12.params=col
comment12.target=void\ validateColumnIndex(int)
comment13.params=col\ row
comment13.target=java.awt.Color\ get(int,\ int)
comment13.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ a\ {@link\ java.awt.Color}.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment14.params=col\ row
comment14.target=int\ getRGB(int,\ int)
comment14.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ an\ {@code\ int}.\r\n\ Using\ this\ method\ can\ be\ more\ efficient\ than\ {@link\ \#get(int,\ int)}\ because\r\n\ it\ does\ not\ create\ a\ {@code\ Color}\ object.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ integer\ representation\ of\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment15.params=col\ row\ color
comment15.target=void\ set(int,\ int,\ java.awt.Color)
comment15.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ color\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment16.params=col\ row\ rgb
comment16.target=void\ setRGB(int,\ int,\ int)
comment16.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ rgb\ the\ integer\ representation\ of\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment17.params=other
comment17.target=boolean\ equals(java.lang.Object)
comment17.text=\r\n\ Returns\ true\ if\ this\ picture\ is\ equal\ to\ the\ argument\ picture.\r\n\r\n\ @param\ other\ the\ other\ picture\r\n\ @return\ {@code\ true}\ if\ this\ picture\ is\ the\ same\ dimension\ as\ {@code\ other}\r\n\ \ \ \ \ \ \ \ \ and\ if\ all\ pixels\ have\ the\ same\ color;\ {@code\ false}\ otherwise\r\n
comment18.params=
comment18.target=java.lang.String\ toString()
comment18.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ picture.\r\n\ The\ result\ is\ a\ <code>width</code>-by-<code>height</code>\ matrix\ of\ pixels,\r\n\ where\ the\ color\ of\ a\ pixel\ is\ represented\ using\ 6\ hex\ digits\ to\ encode\r\n\ the\ red,\ green,\ and\ blue\ components.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ picture\r\n
comment19.params=
comment19.target=int\ hashCode()
comment19.text=\r\n\ This\ operation\ is\ not\ supported\ because\ pictures\ are\ mutable.\r\n\r\n\ @return\ does\ not\ return\ a\ value\r\n\ @throws\ UnsupportedOperationException\ if\ called\r\n
comment2.params=picture
comment2.target=Picture(Picture)
comment2.text=\r\n\ Creates\ a\ new\ picture\ that\ is\ a\ deep\ copy\ of\ the\ argument\ picture.\r\n\r\n\ @param\ \ picture\ the\ picture\ to\ copy\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ picture}\ is\ {@code\ null}\r\n
comment20.params=name
comment20.target=void\ save(java.lang.String)
comment20.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ either\ PNG\ or\ JPEG\ format.\r\n\ The\ filetype\ extension\ must\ be\ either\ .png\ or\ .jpg.\r\n\r\n\ @param\ name\ the\ name\ of\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ name}\ is\ {@code\ null}\r\n
comment21.params=file
comment21.target=void\ save(java.io.File)
comment21.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ a\ PNG\ or\ JPEG\ image\ format.\r\n\r\n\ @param\ \ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment22.params=e
comment22.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment22.text=\r\n\ Opens\ a\ save\ dialog\ box\ when\ the\ user\ selects\ "Save\ As"\ from\ the\ menu.\r\n
comment23.params=args
comment23.target=void\ main(java.lang.String[])
comment23.text=\r\n\ Unit\ tests\ this\ {@code\ Picture}\ data\ type.\r\n\ Reads\ a\ picture\ specified\ by\ the\ command-line\ argument,\r\n\ and\ shows\ it\ in\ a\ window\ on\ the\ screen.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=filename
comment3.target=Picture(java.lang.String)
comment3.text=\r\n\ Creates\ a\ picture\ by\ reading\ an\ image\ from\ a\ file\ or\ URL.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ (.png,\ .gif,\ or\ .jpg)\ or\ URL.\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n
comment4.params=file
comment4.target=Picture(java.io.File)
comment4.text=\r\n\ Creates\ a\ picture\ by\ reading\ the\ image\ from\ a\ PNG,\ GIF,\ or\ JPEG\ file.\r\n\r\n\ @param\ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment5.params=
comment5.target=javax.swing.JLabel\ getJLabel()
comment5.text=\r\n\ Returns\ a\ {@link\ JLabel}\ containing\ this\ picture,\ for\ embedding\ in\ a\ {@link\ JPanel},\r\n\ {@link\ JFrame}\ or\ other\ GUI\ widget.\r\n\r\n\ @return\ the\ {@code\ JLabel}\r\n
comment6.params=
comment6.target=void\ setOriginUpperLeft()
comment6.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ upper\ left\ pixel.\ This\ is\ the\ default.\r\n
comment7.params=
comment7.target=void\ setOriginLowerLeft()
comment7.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ lower\ left\ pixel.\r\n
comment8.params=
comment8.target=void\ show()
comment8.text=\r\n\ Displays\ the\ picture\ in\ a\ window\ on\ the\ screen.\r\n
comment9.params=
comment9.target=int\ height()
comment9.text=\r\n\ Returns\ the\ height\ of\ the\ picture.\r\n\r\n\ @return\ the\ height\ of\ the\ picture\ (in\ pixels)\r\n
numComments=24
