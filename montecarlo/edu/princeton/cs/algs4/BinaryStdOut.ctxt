#BlueJ class context
comment0.target=BinaryStdOut
comment0.text=\r\n\ \ <i>Binary\ standard\ output</i>.\ This\ class\ provides\ methods\ for\ converting\r\n\ \ primtive\ type\ variables\ ({@code\ boolean},\ {@code\ byte},\ {@code\ char},\r\n\ \ {@code\ int},\ {@code\ long},\ {@code\ float},\ and\ {@code\ double})\r\n\ \ to\ sequences\ of\ bits\ and\ writing\ them\ to\ standard\ output.\r\n\ \ Uses\ big-endian\ (most-significant\ byte\ first).\r\n\ \ <p>\r\n\ \ The\ client\ must\ {@code\ flush()}\ the\ output\ stream\ when\ finished\ writing\ bits.\r\n\ \ <p>\r\n\ \ The\ client\ should\ not\ intermix\ calls\ to\ {@code\ BinaryStdOut}\ with\ calls\r\n\ \ to\ {@code\ StdOut}\ or\ {@code\ System.out};\ otherwise\ unexpected\ behavior\ \r\n\ \ will\ result.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=BinaryStdOut()
comment10.params=x
comment10.target=void\ write(int)
comment10.text=\r\n\ Writes\ the\ 32-bit\ int\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ int}\ to\ write.\r\n
comment11.params=x\ r
comment11.target=void\ write(int,\ int)
comment11.text=\r\n\ Writes\ the\ r-bit\ int\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ int}\ to\ write.\r\n\ @param\ r\ the\ number\ of\ relevant\ bits\ in\ the\ char.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ r}\ is\ not\ between\ 1\ and\ 32.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ is\ not\ between\ 0\ and\ 2<sup>r</sup>\ -\ 1.\r\n
comment12.params=x
comment12.target=void\ write(double)
comment12.text=\r\n\ Writes\ the\ 64-bit\ double\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ double}\ to\ write.\r\n
comment13.params=x
comment13.target=void\ write(long)
comment13.text=\r\n\ Writes\ the\ 64-bit\ long\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ long}\ to\ write.\r\n
comment14.params=x
comment14.target=void\ write(float)
comment14.text=\r\n\ Writes\ the\ 32-bit\ float\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ float}\ to\ write.\r\n
comment15.params=x
comment15.target=void\ write(short)
comment15.text=\r\n\ Writes\ the\ 16-bit\ int\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ short}\ to\ write.\r\n
comment16.params=x
comment16.target=void\ write(char)
comment16.text=\r\n\ Writes\ the\ 8-bit\ char\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ char}\ to\ write.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ is\ not\ betwen\ 0\ and\ 255.\r\n
comment17.params=x\ r
comment17.target=void\ write(char,\ int)
comment17.text=\r\n\ Writes\ the\ r-bit\ char\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ char}\ to\ write.\r\n\ @param\ r\ the\ number\ of\ relevant\ bits\ in\ the\ char.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ r}\ is\ not\ between\ 1\ and\ 16.\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ x}\ is\ not\ between\ 0\ and\ 2<sup>r</sup>\ -\ 1.\r\n
comment18.params=s
comment18.target=void\ write(java.lang.String)
comment18.text=\r\n\ Writes\ the\ string\ of\ 8-bit\ characters\ to\ standard\ output.\r\n\ @param\ s\ the\ {@code\ String}\ to\ write.\r\n\ @throws\ IllegalArgumentException\ if\ any\ character\ in\ the\ string\ is\ not\r\n\ between\ 0\ and\ 255.\r\n
comment19.params=s\ r
comment19.target=void\ write(java.lang.String,\ int)
comment19.text=\r\n\ Writes\ the\ string\ of\ r-bit\ characters\ to\ standard\ output.\r\n\ @param\ s\ the\ {@code\ String}\ to\ write.\r\n\ @param\ r\ the\ number\ of\ relevants\ bits\ in\ each\ character.\r\n\ @throws\ IllegalArgumentException\ if\ r\ is\ not\ between\ 1\ and\ 16.\r\n\ @throws\ IllegalArgumentException\ if\ any\ character\ in\ the\ string\ is\ not\r\n\ between\ 0\ and\ 2<sup>r</sup>\ -\ 1.\r\n
comment2.params=
comment2.target=void\ initialize()
comment20.params=args
comment20.target=void\ main(java.lang.String[])
comment20.text=\r\n\ Tests\ the\ methods\ in\ this\ class.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=bit
comment3.target=void\ writeBit(boolean)
comment3.text=\r\n\ Writes\ the\ specified\ bit\ to\ standard\ output.\r\n
comment4.params=x
comment4.target=void\ writeByte(int)
comment4.text=\r\n\ Writes\ the\ 8-bit\ byte\ to\ standard\ output.\r\n
comment5.params=
comment5.target=void\ clearBuffer()
comment6.params=
comment6.target=void\ flush()
comment6.text=\r\n\ Flushes\ standard\ output,\ padding\ 0s\ if\ number\ of\ bits\ written\ so\ far\r\n\ is\ not\ a\ multiple\ of\ 8.\r\n
comment7.params=
comment7.target=void\ close()
comment7.text=\r\n\ Flushes\ and\ closes\ standard\ output.\ Once\ standard\ output\ is\ closed,\ you\ can\ no\r\n\ longer\ write\ bits\ to\ it.\r\n
comment8.params=x
comment8.target=void\ write(boolean)
comment8.text=\r\n\ Writes\ the\ specified\ bit\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ boolean}\ to\ write.\r\n
comment9.params=x
comment9.target=void\ write(byte)
comment9.text=\r\n\ Writes\ the\ 8-bit\ byte\ to\ standard\ output.\r\n\ @param\ x\ the\ {@code\ byte}\ to\ write.\r\n
numComments=21
