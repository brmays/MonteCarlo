#BlueJ class context
comment0.target=NFA
comment0.text=\r\n\ \ The\ {@code\ NFA}\ class\ provides\ a\ data\ type\ for\ creating\ a\r\n\ \ <em>nondeterministic\ finite\ state\ automaton</em>\ (NFA)\ from\ a\ regular\r\n\ \ expression\ and\ testing\ whether\ a\ given\ string\ is\ matched\ by\ that\ regular\r\n\ \ expression.\r\n\ \ It\ supports\ the\ following\ operations\:\ <em>concatenation</em>,\r\n\ \ <em>closure</em>,\ <em>binary\ or</em>,\ and\ <em>parentheses</em>.\r\n\ \ It\ does\ not\ support\ <em>mutiway\ or</em>,\ <em>character\ classes</em>,\r\n\ \ <em>metacharacters</em>\ (either\ in\ the\ text\ or\ pattern),\r\n\ \ <em>capturing\ capabilities</em>,\ <em>greedy</em>\ or\ <em>relucantant</em>\r\n\ \ modifiers,\ and\ other\ features\ in\ industrial-strength\ implementations\r\n\ \ such\ as\ {@link\ java.util.regex.Pattern}\ and\ {@link\ java.util.regex.Matcher}.\r\n\ \ <p>\r\n\ \ This\ implementation\ builds\ the\ NFA\ using\ a\ digraph\ and\ a\ stack\r\n\ \ and\ simulates\ the\ NFA\ using\ digraph\ search\ (see\ the\ textbook\ for\ details).\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>m</em>,\ where\ <em>m</em>\r\n\ \ is\ the\ number\ of\ characters\ in\ the\ regular\ expression.\r\n\ \ The\ <em>recognizes</em>\ method\ takes\ time\ proportional\ to\ <em>m\ n</em>,\r\n\ \ where\ <em>n</em>\ is\ the\ number\ of\ characters\ in\ the\ text.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/54regexp">Section\ 5.4</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=regexp
comment1.target=NFA(java.lang.String)
comment1.text=\r\n\ Initializes\ the\ NFA\ from\ the\ specified\ regular\ expression.\r\n\r\n\ @param\ \ regexp\ the\ regular\ expression\r\n
comment2.params=txt
comment2.target=boolean\ recognizes(java.lang.String)
comment2.text=\r\n\ Returns\ true\ if\ the\ text\ is\ matched\ by\ the\ regular\ expression.\r\n\ \r\n\ @param\ \ txt\ the\ text\r\n\ @return\ {@code\ true}\ if\ the\ text\ is\ matched\ by\ the\ regular\ expression,\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment3.params=args
comment3.target=void\ main(java.lang.String[])
comment3.text=\r\n\ Unit\ tests\ the\ {@code\ NFA}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=4
