#BlueJ class context
comment0.target=Insertion
comment0.text=\r\n\ \ The\ {@code\ Insertion}\ class\ provides\ static\ methods\ for\ sorting\ an\r\n\ \ array\ using\ insertion\ sort.\r\n\ \ <p>\r\n\ \ This\ implementation\ makes\ ~\ 1/2\ n^2\ compares\ and\ exchanges\ in\r\n\ \ the\ worst\ case,\ so\ it\ is\ not\ suitable\ for\ sorting\ large\ arbitrary\ arrays.\r\n\ \ More\ precisely,\ the\ number\ of\ exchanges\ is\ exactly\ equal\ to\ the\ number\r\n\ \ of\ inversions.\ So,\ for\ example,\ it\ sorts\ a\ partially-sorted\ array\r\n\ \ in\ linear\ time.\r\n\ \ <p>\r\n\ \ The\ sorting\ algorithm\ is\ stable\ and\ uses\ O(1)\ extra\ memory.\r\n\ \ <p>\r\n\ \ See\ <a\ href\="https\://algs4.cs.princeton.edu/21elementary/InsertionPedantic.java.html">InsertionPedantic.java</a>\r\n\ \ for\ a\ version\ that\ eliminates\ the\ compiler\ warning.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/21elementary">Section\ 2.1</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=Insertion()
comment10.params=a\ i\ j
comment10.target=void\ exch(int[],\ int,\ int)
comment11.params=a
comment11.target=boolean\ isSorted(java.lang.Comparable[])
comment11.text=\r\n\ \ Check\ if\ array\ is\ sorted\ -\ useful\ for\ debugging.\r\n
comment12.params=a\ lo\ hi
comment12.target=boolean\ isSorted(java.lang.Comparable[],\ int,\ int)
comment13.params=a\ comparator
comment13.target=boolean\ isSorted(java.lang.Object[],\ java.util.Comparator)
comment14.params=a\ lo\ hi\ comparator
comment14.target=boolean\ isSorted(java.lang.Object[],\ int,\ int,\ java.util.Comparator)
comment15.params=a
comment15.target=void\ show(java.lang.Comparable[])
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\r\n\ Reads\ in\ a\ sequence\ of\ strings\ from\ standard\ input;\ insertion\ sorts\ them;\r\n\ and\ prints\ them\ to\ standard\ output\ in\ ascending\ order.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=a
comment2.target=void\ sort(java.lang.Comparable[])
comment2.text=\r\n\ Rearranges\ the\ array\ in\ ascending\ order,\ using\ the\ natural\ order.\r\n\ @param\ a\ the\ array\ to\ be\ sorted\r\n
comment3.params=a\ lo\ hi
comment3.target=void\ sort(java.lang.Comparable[],\ int,\ int)
comment3.text=\r\n\ Rearranges\ the\ subarray\ a[lo..hi)\ in\ ascending\ order,\ using\ the\ natural\ order.\r\n\ @param\ a\ the\ array\ to\ be\ sorted\r\n\ @param\ lo\ left\ endpoint\ (inclusive)\r\n\ @param\ hi\ right\ endpoint\ (exclusive)\r\n
comment4.params=a\ comparator
comment4.target=void\ sort(java.lang.Object[],\ java.util.Comparator)
comment4.text=\r\n\ Rearranges\ the\ array\ in\ ascending\ order,\ using\ a\ comparator.\r\n\ @param\ a\ the\ array\r\n\ @param\ comparator\ the\ comparator\ specifying\ the\ order\r\n
comment5.params=a\ lo\ hi\ comparator
comment5.target=void\ sort(java.lang.Object[],\ int,\ int,\ java.util.Comparator)
comment5.text=\r\n\ Rearranges\ the\ subarray\ a[lo..hi)\ in\ ascending\ order,\ using\ a\ comparator.\r\n\ @param\ a\ the\ array\r\n\ @param\ lo\ left\ endpoint\ (inclusive)\r\n\ @param\ hi\ right\ endpoint\ (exclusive)\r\n\ @param\ comparator\ the\ comparator\ specifying\ the\ order\r\n
comment6.params=a
comment6.target=int[]\ indexSort(java.lang.Comparable[])
comment6.text=\r\n\ Returns\ a\ permutation\ that\ gives\ the\ elements\ in\ the\ array\ in\ ascending\ order.\r\n\ @param\ a\ the\ array\r\n\ @return\ a\ permutation\ {@code\ p[]}\ such\ that\ {@code\ a[p[0]]},\ {@code\ a[p[1]]},\r\n\ \ \ \ ...,\ {@code\ a[p[n-1]]}\ are\ in\ ascending\ order\r\n
comment7.params=v\ w
comment7.target=boolean\ less(java.lang.Comparable,\ java.lang.Comparable)
comment7.text=\r\n\ \ Helper\ sorting\ functions.\r\n
comment8.params=v\ w\ comparator
comment8.target=boolean\ less(java.lang.Object,\ java.lang.Object,\ java.util.Comparator)
comment9.params=a\ i\ j
comment9.target=void\ exch(java.lang.Object[],\ int,\ int)
numComments=17
