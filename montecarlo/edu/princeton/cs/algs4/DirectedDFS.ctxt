#BlueJ class context
comment0.target=DirectedDFS
comment0.text=\r\n\ \ The\ {@code\ DirectedDFS}\ class\ represents\ a\ data\ type\ for\ \r\n\ \ determining\ the\ vertices\ reachable\ from\ a\ given\ source\ vertex\ <em>s</em>\r\n\ \ (or\ set\ of\ source\ vertices)\ in\ a\ digraph.\ For\ versions\ that\ find\ the\ paths,\r\n\ \ see\ {@link\ DepthFirstDirectedPaths}\ and\ {@link\ BreadthFirstDirectedPaths}.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ depth-first\ search.\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>V</em>\ +\ <em>E</em>\r\n\ \ (in\ the\ worst\ case),\r\n\ \ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\ <em>E</em>\ is\ the\ number\ of\ edges.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/42digraph">Section\ 4.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G\ s
comment1.target=DirectedDFS(Digraph,\ int)
comment1.text=\r\n\ Computes\ the\ vertices\ in\ digraph\ {@code\ G}\ that\ are\r\n\ reachable\ from\ the\ source\ vertex\ {@code\ s}.\r\n\ @param\ G\ the\ digraph\r\n\ @param\ s\ the\ source\ vertex\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n
comment2.params=G\ sources
comment2.target=DirectedDFS(Digraph,\ java.lang.Iterable)
comment2.text=\r\n\ Computes\ the\ vertices\ in\ digraph\ {@code\ G}\ that\ are\r\n\ connected\ to\ any\ of\ the\ source\ vertices\ {@code\ sources}.\r\n\ @param\ G\ the\ graph\r\n\ @param\ sources\ the\ source\ vertices\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n\ \ \ \ \ \ \ \ \ for\ each\ vertex\ {@code\ s}\ in\ {@code\ sources}\r\n
comment3.params=G\ v
comment3.target=void\ dfs(Digraph,\ int)
comment4.params=v
comment4.target=boolean\ marked(int)
comment4.text=\r\n\ Is\ there\ a\ directed\ path\ from\ the\ source\ vertex\ (or\ any\r\n\ of\ the\ source\ vertices)\ and\ vertex\ {@code\ v}?\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ directed\ path,\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment5.params=
comment5.target=int\ count()
comment5.text=\r\n\ Returns\ the\ number\ of\ vertices\ reachable\ from\ the\ source\ vertex\r\n\ (or\ source\ vertices).\r\n\ @return\ the\ number\ of\ vertices\ reachable\ from\ the\ source\ vertex\r\n\ \ \ (or\ source\ vertices)\r\n
comment6.params=v
comment6.target=void\ validateVertex(int)
comment7.params=vertices
comment7.target=void\ validateVertices(java.lang.Iterable)
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Unit\ tests\ the\ {@code\ DirectedDFS}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=9
