#BlueJ class context
comment0.target=Topological
comment0.text=\r\n\ \ The\ {@code\ Topological}\ class\ represents\ a\ data\ type\ for\ \r\n\ \ determining\ a\ topological\ order\ of\ a\ directed\ acyclic\ graph\ (DAG).\r\n\ \ Recall,\ a\ digraph\ has\ a\ topological\ order\ if\ and\ only\ if\ it\ is\ a\ DAG.\r\n\ \ The\ <em>hasOrder</em>\ operation\ determines\ whether\ the\ digraph\ has\r\n\ \ a\ topological\ order,\ and\ if\ so,\ the\ <em>order</em>\ operation\r\n\ \ returns\ one.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ depth-first\ search.\r\n\ \ The\ constructor\ takes\ time\ proportional\ to\ <em>V</em>\ +\ <em>E</em>\r\n\ \ (in\ the\ worst\ case),\r\n\ \ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\ <em>E</em>\ is\ the\ number\ of\ edges.\r\n\ \ Afterwards,\ the\ <em>hasOrder</em>\ and\ <em>rank</em>\ operations\ takes\ constant\ time;\r\n\ \ the\ <em>order</em>\ operation\ takes\ time\ proportional\ to\ <em>V</em>.\r\n\ \ <p>\r\n\ \ See\ {@link\ DirectedCycle},\ {@link\ DirectedCycleX},\ and\r\n\ \ {@link\ EdgeWeightedDirectedCycle}\ to\ compute\ a\r\n\ \ directed\ cycle\ if\ the\ digraph\ is\ not\ a\ DAG.\r\n\ \ See\ {@link\ TopologicalX}\ for\ a\ nonrecursive\ queue-based\ algorithm\r\n\ \ to\ compute\ a\ topological\ order\ of\ a\ DAG.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/42digraph">Section\ 4.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G
comment1.target=Topological(Digraph)
comment1.text=\r\n\ Determines\ whether\ the\ digraph\ {@code\ G}\ has\ a\ topological\ order\ and,\ if\ so,\r\n\ finds\ such\ a\ topological\ order.\r\n\ @param\ G\ the\ digraph\r\n
comment2.params=G
comment2.target=Topological(EdgeWeightedDigraph)
comment2.text=\r\n\ Determines\ whether\ the\ edge-weighted\ digraph\ {@code\ G}\ has\ a\ topological\r\n\ order\ and,\ if\ so,\ finds\ such\ an\ order.\r\n\ @param\ G\ the\ edge-weighted\ digraph\r\n
comment3.params=
comment3.target=java.lang.Iterable\ order()
comment3.text=\r\n\ Returns\ a\ topological\ order\ if\ the\ digraph\ has\ a\ topologial\ order,\r\n\ and\ {@code\ null}\ otherwise.\r\n\ @return\ a\ topological\ order\ of\ the\ vertices\ (as\ an\ interable)\ if\ the\r\n\ \ \ \ digraph\ has\ a\ topological\ order\ (or\ equivalently,\ if\ the\ digraph\ is\ a\ DAG),\r\n\ \ \ \ and\ {@code\ null}\ otherwise\r\n
comment4.params=
comment4.target=boolean\ hasOrder()
comment4.text=\r\n\ Does\ the\ digraph\ have\ a\ topological\ order?\r\n\ @return\ {@code\ true}\ if\ the\ digraph\ has\ a\ topological\ order\ (or\ equivalently,\r\n\ \ \ \ if\ the\ digraph\ is\ a\ DAG),\ and\ {@code\ false}\ otherwise\r\n
comment5.params=
comment5.target=boolean\ isDAG()
comment5.text=\r\n\ Does\ the\ digraph\ have\ a\ topological\ order?\r\n\ @return\ {@code\ true}\ if\ the\ digraph\ has\ a\ topological\ order\ (or\ equivalently,\r\n\ \ \ \ if\ the\ digraph\ is\ a\ DAG),\ and\ {@code\ false}\ otherwise\r\n\ @deprecated\ Replaced\ by\ {@link\ \#hasOrder()}.\r\n
comment6.params=v
comment6.target=int\ rank(int)
comment6.text=\r\n\ The\ the\ rank\ of\ vertex\ {@code\ v}\ in\ the\ topological\ order;\r\n\ -1\ if\ the\ digraph\ is\ not\ a\ DAG\r\n\r\n\ @param\ v\ the\ vertex\r\n\ @return\ the\ position\ of\ vertex\ {@code\ v}\ in\ a\ topological\ order\r\n\ \ \ \ of\ the\ digraph;\ -1\ if\ the\ digraph\ is\ not\ a\ DAG\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment7.params=v
comment7.target=void\ validateVertex(int)
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Unit\ tests\ the\ {@code\ Topological}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=9
